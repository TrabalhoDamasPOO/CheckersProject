package main;
import java.util.Scanner;

import enums.Color;

//import Cores.Board;

public class Game {
    private Board board;
    private Player whitePlayer = new Player(Color.white);
    private Player blackPlayer = new Player(Color.black);
    private int numberOfTurns = 1;
    private int capturedWhiteCheckers;
    private int capturedBlackCheckers;
    private Player currentPlayer = whitePlayer;
    private Scanner scanner;
	
    
    public Game() {
        this.board = new Board();
        this.capturedWhiteCheckers = 0;
        this.capturedBlackCheckers = 0;
        this.scanner = new Scanner(System.in);
    }

    public void start() {
		System.out.println("------------------------------------------");
        System.out.println("Digite 'sair' para encerrar o jogo.");
		System.out.println("------------------------------------------");

        boolean jogar = true;
        while (jogar) {
            Board.imprimirTabuleiro(board.getTabuleiro());
            printPlayerTurn();

            int[] origemCoords = getCoordinates("Digite a linha e coluna de origem (ex: 2 3): ");
            if (origemCoords == null) {
                jogar = false;
                continue;
            }

            int[] destinoCoords = getCoordinates("Digite a linha e coluna de destino (ex: 3 4): ");
            if (destinoCoords == null) {
                jogar = false;
                continue;
            }

            movePiece(origemCoords[0], origemCoords[1], destinoCoords[0], destinoCoords[1]);
        }
        printFinalScores();
        scanner.close();
    }

    private int[] getCoordinates(String prompt) {
		while (true) {
			String input = getUserInput(prompt);
			if (!processInput(input)) {
				return null;  // Retorna null se o jogador digitar "sair"
			}

			int[] coordinates = parseCoordinates(input);
			if (coordinates != null) {
				// Verificar se as coordenadas estão dentro dos limites
				if (areValidCoordinates(coordinates)) {
					return coordinates;  // Retorna as coordenadas válidas
				} else {
					System.out.println("\n--------------------------------------------------------------------------");
					System.out.println("Coordenadas inválidas! Tente novamente.");  // Mensagem específica para coordenadas fora dos limites
					System.out.println("--------------------------------------------------------------------------\n");
				}
			} else {
				System.out.println("\n--------------------------------------------------------------------------");
				System.out.println("Entrada inválida. Por favor, insira novamente no formato correto (ex: 2 3).");  // Mensagem para entrada inválida
				System.out.println("--------------------------------------------------------------------------\n");
			}

		}
	}


	private boolean areValidCoordinates(int[] coordinates) {
		int linha = coordinates[0];
		int coluna = coordinates[1];
		return linha >= 0 && linha < Board.DEFAULT_SIZE && coluna >= 0 && coluna < Board.DEFAULT_SIZE;
	}

    private String getUserInput(String prompt) {
        System.out.print(prompt);
        return scanner.nextLine();
    }

    private boolean processInput(String input) {
        if (input.equalsIgnoreCase("sair")) {
            System.out.println("Jogo encerrado.");
            return false;
        }
        return true;
    }

    private int[] parseCoordinates(String input) {
        try {
            String[] parts = input.split(" ");
            int linha = Integer.parseInt(parts[0]) - 1;
            int coluna = Integer.parseInt(parts[1]) - 1;
            return new int[]{linha, coluna};
        } catch (Exception e) {
            return null;
        }
    }

    private void movePiece(int linhaOrigem, int colunaOrigem, int linhaDestino, int colunaDestino) {
        //char peca = board.getPosicao(linhaOrigem, colunaOrigem); Verificar se o movimento é válido antes de tentar encontrar a peça
        
        if (isValidMove(linhaOrigem, colunaOrigem, linhaDestino, colunaDestino)) {
            char peca = board.getPosicao(linhaOrigem, colunaOrigem);
            char casaDestino = board.getPosicao(linhaDestino, colunaDestino);
            boolean sequencia = false;
            
	        if ((peca == 'w' || peca == 'b' || peca == 'W' || peca == 'B') && (casaDestino == 'o')){
	            // Verificar se a peça pertence ao jogador atual
	            if (isAdversaria(peca, currentPlayer.getColor() == Color.white)) {
	
	                // Mover a peça para a nova posição
	                board.setPosicao(linhaDestino, colunaDestino, peca);
	                board.setPosicao(linhaOrigem, colunaOrigem, (linhaOrigem + colunaOrigem) % 2 == 0 ? 'x' : 'o'); // Limpa a posição antiga
	
	                // Verificar se a peça deve ser promovida a dama
	                if ((peca == 'b' && linhaDestino == 7) || (peca == 'w' && linhaDestino == 0)) {
	                    board.setPosicao(linhaDestino, colunaDestino, peca == 'w' ? 'W' : 'B');
	                }
	
	                // Verificar capturas
	                if (isCapture(linhaOrigem, colunaOrigem, linhaDestino, colunaDestino) || checkKingCapture(linhaOrigem, colunaOrigem, linhaDestino, colunaDestino)) {
	                	removePiece(linhaOrigem, colunaOrigem, linhaDestino, colunaDestino);
	                    if (peca == 'w' || peca == 'W') {
	                        capturedWhiteCheckers++;
	                    } else {
	                        capturedBlackCheckers++;
	                    }
		                if ((board.scanCapturasDisponiveis(linhaDestino, colunaDestino, (currentPlayer.getColor() == Color.white)) > 0) || (board.scanCapturasDistantes(linhaDestino, colunaDestino, (currentPlayer.getColor() == Color.white)) > 0)) { //Verificar se há uma captura em sequência disponível
		                	sequencia = true;
		                }
	                }
	                
	                if (!sequencia) { //Captura em sequência

		                changeShift();
	                }
	            } else {
	                System.out.println("Você não pode mover a peça do oponente.");
	            }
	        } else {
	            System.out.println("Movimento inválido!");
	        }
        } else {
            System.out.println("Movimento não permitido.");
        }
    }
    
    public boolean isAdversaria(char peca, boolean whitePlayer) {
        return whitePlayer ? (peca == 'b' || peca == 'B') : (peca == 'w' || peca == 'W');
    }

    private void printPlayerTurn() {
    	System.out.println("Turno: " + numberOfTurns);
        System.out.println(currentPlayer.getColor() == Color.white ? "É a vez do jogador Branco." : "É a vez do jogador Preto.");
    }
    
    private boolean isValidMove(int linhaOrigem, int colunaOrigem, int linhaDestino, int colunaDestino) {
        
    	//Verificar se o movimento respeita os limites do tabuleiro
        if ((linhaOrigem >= Board.DEFAULT_SIZE) || (linhaOrigem < 0) || (colunaOrigem >= Board.DEFAULT_SIZE) || (colunaOrigem < 0)) {
        	return false;
        } else if ((linhaDestino >= Board.DEFAULT_SIZE) || (linhaDestino < 0) || (colunaDestino >= Board.DEFAULT_SIZE) || (colunaDestino < 0)) {
        	return false;
        }
    	
        // Verificar se o movimento é diagonal e de uma única casa
    	if (Math.abs(linhaDestino - linhaOrigem) == 1 && Math.abs(colunaDestino - colunaOrigem) == 1) { //Movimento não é captura
    		for (int i = 0; i < Board.DEFAULT_SIZE; i++) { //Percorrer todo o tabuleiro procurando capturas disponíveis
    			for (int j = 0; j < Board.DEFAULT_SIZE; j++) {
    				if ((board.getPosicao(i, j) != 'x') && (board.getPosicao(i, j) != 'o')) {
			    		if ((board.scanCapturasDisponiveis(i, j, (currentPlayer.getColor() == Color.white)) > 0) || (board.scanCapturasDistantes(i, j, (currentPlayer.getColor() == Color.white)) > 0)) { //Captura obrigatória
			    			//System.out.println(currentPlayer.getColor());
			    			System.out.println("Captura obrigatória não realizada.");
			    			return false;
			    		} /*else {
			    			System.out.println("Captura obrigatória não realizada.");
			    			return false;
			    		}*/
    				}
    			}
    		}
    		//Verificar se a peça está andando para trás sem ser uma dama
    		if (!board.isKing(linhaOrigem, colunaOrigem)) {
    			int dirLinha = Board.getDir(linhaOrigem, colunaOrigem, linhaDestino, colunaDestino)[0];
    			if ((dirLinha > 0) && (currentPlayer.getColor() == Color.white)) {
    				return false;
    			} else if ((dirLinha < 0) && (currentPlayer.getColor() == Color.black)) {
    				return false;
    			}
    		}
    		return true;
        //return Math.abs(linhaDestino - linhaOrigem) == 1 && Math.abs(colunaDestino - colunaOrigem) == 1;
    	} else if ((Math.abs(linhaDestino - linhaOrigem) == Math.abs(colunaDestino - colunaOrigem)) && board.isKing(linhaOrigem, colunaOrigem)) { //Damas se movem mais de uma casa
    		//System.out.println("testando dama"); //DEBUG
    		if (board.verificarObstaculos(linhaOrigem, colunaOrigem, linhaDestino, colunaDestino)) { //Verificar existe obstáculos
    			//System.out.println("Sem obstáculos!"); //DEBUG
	    		for (int i = 0; i < Board.DEFAULT_SIZE; i++) { //Percorrer todo o tabuleiro procurando capturas disponíveis
	    			for (int j = 0; j < Board.DEFAULT_SIZE; j++) {
	    				if ((board.getPosicao(i, j) != 'x') && (board.getPosicao(i, j) != 'o')) {
				    		if ((board.scanCapturasDisponiveis(i, j, (currentPlayer.getColor() == Color.white)) > 0) || (board.scanCapturasDistantes(i, j, (currentPlayer.getColor() == Color.white)) > 0)) { //Captura obrigatória
				    			System.out.println("Captura obrigatória não realizada.");
				    			return false;
				    		} /*else {
				    			System.out.println("Captura obrigatória não realizada.");
				    			return false;
				    		}*/
	    				}
	    			}
	    		}
	    		return true;
    		} else {
    			return isCapture(linhaOrigem, colunaOrigem, linhaDestino, colunaDestino); //Se houver obstáculos, verificar se o tal obstáculo é na verdade uma peça adversária a ser capturada
    		}
    	} else {
    		return isCapture(linhaOrigem, colunaOrigem, linhaDestino, colunaDestino); //Isso deve corrigir o bug aonde capturas eram movimentos ilegais
    	}
    }



    private void removePiece(int linhaOrigem, int colunaOrigem, int linhaDestino, int colunaDestino) {
    	//Remove a peça localizada na casa anterior à casa de destino
    	//Esse código serve tanto para damas como para peças normais
    	int dir[] = Board.getDir(linhaDestino, colunaDestino, linhaOrigem, colunaOrigem); //OBS: Direção invertida para facilitar verificações
    	dir[0] = (int)(dir[0]/Math.abs(dir[0])); //Transformar os valores em 1 ou -1
    	dir[1] = (int)(dir[1]/Math.abs(dir[1]));
    	int linhaCapturada = linhaDestino + dir[0];
    	int colunaCapturada = colunaDestino + dir[1];
        //int linhaCapturada = (linhaOrigem + linhaDestino) / 2;
        //int colunaCapturada = (colunaOrigem + colunaDestino) / 2;
        board.setPosicao(linhaCapturada, colunaCapturada, (linhaCapturada + colunaCapturada) % 2 == 0 ? 'x' : 'o');
    }
    private boolean isCapture(int linhaOrigem, int colunaOrigem, int linhaDestino, int colunaDestino) {
    	//Acredito que essa verificação não se faz necessária, pois o método isCapture só é chamado depois de isValidMove
    	//Caso necessário, é só descomentar o código abaixo
    	/*

       	//Verificar se o movimento respeita os limites do tabuleiro
        if ((linhaOrigem >= Board.DEFAULT_SIZE) || (linhaOrigem < 0) || (colunaOrigem >= Board.DEFAULT_SIZE) || (colunaOrigem < 0)) {
        	return false;
        } else if ((linhaDestino >= Board.DEFAULT_SIZE) || (linhaDestino < 0) || (colunaDestino >= Board.DEFAULT_SIZE) || (colunaDestino < 0)) {
        	return false;
        }
        
    	 */
    	//Verificar se a captura está ocorrendo na direção correta
    	int dir[] = Board.getDir(linhaDestino, colunaDestino, linhaOrigem, colunaOrigem); //OBS: Direção invertida para facilitar verificações
    	dir[0] = (int)(dir[0]/Math.abs(dir[0])); //Transformar os valores em 1 ou -1
    	dir[1] = (int)(dir[1]/Math.abs(dir[1]));
    	char pecaCaptura = board.getPosicao(linhaDestino+dir[0], colunaDestino+dir[1]);
    	
    	//Verificar se existe uma peça adversária entre o destino e a origem
    	if (((pecaCaptura == 'b') || (pecaCaptura == 'B')) && (currentPlayer.getColor() == Color.white)) { //Adicionar verificação de damas aqui
    		if (board.isKing(linhaOrigem, colunaOrigem)) { //Caso seja uma dama, verificar se existe obstáculo entre as duas peças
    			return board.verificarObstaculos(linhaOrigem, colunaOrigem, linhaDestino+dir[0], colunaDestino+dir[1]);
    		} else {
    			return Math.abs(linhaDestino - linhaOrigem) == 2 && Math.abs(colunaDestino - colunaOrigem) == 2;
    		}
    	} else if (((pecaCaptura == 'w') || (pecaCaptura == 'W')) && (currentPlayer.getColor() == Color.black)) {
    		if (board.isKing(linhaOrigem, colunaOrigem)) { //Caso seja uma dama, verificar se existe obstáculo entre as duas peças
    			return board.verificarObstaculos(linhaOrigem, colunaOrigem, linhaDestino+dir[0], colunaDestino+dir[1]);
    		} else {
    			return Math.abs(linhaDestino - linhaOrigem) == 2 && Math.abs(colunaDestino - colunaOrigem) == 2;
    		}
    	} else {
    		return false;
    	}
    	
        //return Math.abs(linhaDestino - linhaOrigem) == 2 && Math.abs(colunaDestino - colunaOrigem) == 2;
    }

    //Verificação para capturas realizadas à distância por uma dama
    //Isso se faz necessário porque a verificação isCapture não funciona para uma dama após o fim do movimento
    //Os valores de origem são utilizados apenas para calcular a direção
    private boolean checkKingCapture(int linhaOrigem, int colunaOrigem, int linhaDestino, int colunaDestino) {
    	if (!board.isKing(linhaDestino, colunaDestino)) {
    		return false;
    	}
    	
    	//Parecido com o código da função isCapture
    	int dir[] = Board.getDir(linhaDestino, colunaDestino, linhaOrigem, colunaOrigem); //OBS: Direção invertida para facilitar verificações
    	dir[0] = (int)(dir[0]/Math.abs(dir[0])); //Transformar os valores em 1 ou -1
    	dir[1] = (int)(dir[1]/Math.abs(dir[1]));
    	char pecaCaptura = board.getPosicao(linhaDestino+dir[0], colunaDestino+dir[1]);
    	
    	//Verificar se existe uma peça adversária entre o destino e a origem
    	if (((pecaCaptura == 'b') || (pecaCaptura == 'B')) && (currentPlayer.getColor() == Color.white)) { //Adicionar verificação de damas aqui
    		return true;
    	} else if (((pecaCaptura == 'w') || (pecaCaptura == 'W')) && (currentPlayer.getColor() == Color.black)) {
    		return true;
    	} else {
    		return false;
    	}
    }
    
    private void changeShift() {
    	if(currentPlayer.getColor() == Color.white) {
    		currentPlayer = blackPlayer;
    	} else {
    		currentPlayer = whitePlayer;
    	}
        numberOfTurns++;
    }

    private void printFinalScores() {
		System.out.println("\n--------------------------------------------------------------");
        System.out.println("Pecas capturadas pelo jogador Branco: " + capturedWhiteCheckers);
        System.out.println("Pecas capturadas pelo jogador Preto: " + capturedBlackCheckers);

		if (capturedWhiteCheckers == 0 && capturedBlackCheckers == 0) {
			System.out.println("Nenhum jogador capturou peças.");
		} else if (capturedWhiteCheckers > capturedBlackCheckers) {
			System.out.println("O jogador Branco capturou mais peças.");
		} else if (capturedBlackCheckers > capturedWhiteCheckers) {
			System.out.println("O jogador Preto capturou mais peças.");
		} else {
			System.out.println("Ambos os jogadores capturaram o mesmo número de peças.");
		}
		System.out.println("--------------------------------------------------------------");
    }
    
}
